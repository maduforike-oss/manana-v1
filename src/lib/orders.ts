import { supabase } from '@/integrations/supabase/client';

export type Order = {
  id: string;
  user_id: string;
  order_number: string;
  status: 'pending' | 'processing' | 'shipped' | 'delivered' | 'cancelled';
  total_amount: number;
  currency: string;
  items: Array<{
    design_id?: string;
    garment_type: string;
    size: string;
    color: string;
    quantity: number;
    price: number;
    design_preview?: string;
  }>;
  shipping_address?: {
    name: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
  };
  billing_address?: {
    name: string;
    address: string;
    city: string;
    state: string;
    zip: string;
    country: string;
  };
  payment_method?: {
    type: 'card' | 'paypal';
    last4?: string;
    brand?: string;
  };
  notes?: string;
  created_at: string;
  updated_at: string;
};

/** Create a new order */
export async function createOrder(orderData: Omit<Order, 'id' | 'user_id' | 'order_number' | 'created_at' | 'updated_at'>): Promise<Order> {
  const { data: { user }, error: userErr } = await supabase.auth.getUser();
  if (userErr) throw userErr;
  if (!user) throw new Error('Not authenticated');

  const { data, error } = await supabase
    .from('orders')
    .insert({
      user_id: user.id,
      order_number: '', // Will be auto-generated by trigger
      ...orderData
    })
    .select('*')
    .single();

  if (error) throw error;
  return data as Order;
}

/** Get orders for the current user */
export async function getMyOrders(limit = 20, offset = 0): Promise<Order[]> {
  const { data: { user }, error: userErr } = await supabase.auth.getUser();
  if (userErr) throw userErr;
  if (!user) return [];

  const { data, error } = await supabase
    .from('orders')
    .select('*')
    .eq('user_id', user.id)
    .order('created_at', { ascending: false })
    .range(offset, offset + limit - 1);

  if (error) throw error;
  return (data || []) as Order[];
}

/** Get a specific order by ID */
export async function getOrderById(orderId: string): Promise<Order | null> {
  const { data: { user }, error: userErr } = await supabase.auth.getUser();
  if (userErr) throw userErr;
  if (!user) return null;

  const { data, error } = await supabase
    .from('orders')
    .select('*')
    .eq('id', orderId)
    .eq('user_id', user.id)
    .single();

  if (error) {
    if (error.code === 'PGRST116') return null; // Not found
    throw error;
  }
  return data as Order;
}

/** Update order status */
export async function updateOrderStatus(orderId: string, status: Order['status'], notes?: string): Promise<Order> {
  const { data: { user }, error: userErr } = await supabase.auth.getUser();
  if (userErr) throw userErr;
  if (!user) throw new Error('Not authenticated');

  const updateData: any = { status };
  if (notes !== undefined) updateData.notes = notes;

  const { data, error } = await supabase
    .from('orders')
    .update(updateData)
    .eq('id', orderId)
    .eq('user_id', user.id)
    .select('*')
    .single();

  if (error) throw error;
  return data as Order;
}

/** Get order statistics for the current user */
export async function getOrderStats(): Promise<{
  total_orders: number;
  total_spent: number;
  pending_orders: number;
}> {
  const { data: { user }, error: userErr } = await supabase.auth.getUser();
  if (userErr) throw userErr;
  if (!user) return { total_orders: 0, total_spent: 0, pending_orders: 0 };

  const { data, error } = await supabase
    .from('orders')
    .select('status, total_amount')
    .eq('user_id', user.id);

  if (error) throw error;

  const orders = data || [];
  return {
    total_orders: orders.length,
    total_spent: orders.reduce((sum, order) => sum + order.total_amount, 0),
    pending_orders: orders.filter(order => order.status === 'pending').length
  };
}